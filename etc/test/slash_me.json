{
  "configCompleteRedirectUrl": "https://chat.google.com/api/bot_config_complete?token=AAJCfVXOf7nmMlNnhrVT86-W167jo6Pacy4IHbFFaVmhhEVwH-1jviCW8vJPxSRURow3d-JCE0O8Twt7UBpAF__z7jIr3xmkMzX39rfusmUB3heixQaF_9Wn0SSOUwQVFfWRUnQDi9qvSUbJ42Stm8E%3D",
  "eventTime": "2021-03-20T04:55:28.824271Z",
  "message": {
    "argumentText": "/str -tl sffagOJFOIJFWFIWPOFJ",
    "createTime": "2021-03-20T04:55:28.824271Z",
    "name": "spaces/sVBZ8wAAAAE/messages/1RKCICeswk4.1RKCICeswk4",
    "sender": {
      "avatarUrl": "https://lh3.googleusercontent.com/a-/AOh14GjXYpL5CX8SHegBUm50c7V6LNEAli_JHcRUdA6wMw=k",
      "displayName": "Sascha Bast",
      "domainId": "3f8yvml",
      "email": "sascha.bast@dgm-kommunikation.de",
      "name": "users/115408569395812721682",
      "type": "HUMAN"
    },
    "space": {
      "name": "spaces/sVBZ8wAAAAE",
      "singleUserBotDm": true,
      "type": "DM"
    },
    "text": "/cs  #!/usr/bin/python3 -u\nimport logging\nfrom logging.config import dictConfig\n\nfrom flask import Flask, request, json, send_from_directory, abort\nfrom google.oauth2 import service_account\nfrom googleapiclient.discovery import build\n\nfrom components.constant_service.ConsstantsService import ConstantsService\nfrom components.settings_repository.SettingsRepository import SettingsRepository\nfrom task.TaskBuilder import TaskBuilder\n\nsettings_repository = SettingsRepository()\n\ndictConfig({\n  'version': 1,\n  'formatters': {'default': {\n    'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n  }},\n  'handlers': {'wsgi': {\n    'class': 'logging.StreamHandler',\n    'stream': 'ext://sys.stdout',\n    'formatter': 'default'\n  }},\n  'root': {\n    'level': 'INFO',\n    'handlers': ['wsgi']\n  }\n})\n\napp = Flask(__name__)\n\ncredentials = service_account.Credentials.from_service_account_file(\n    ConstantsService.get_value('credentials'),\n    scopes=ConstantsService.get_value('scopes'))\nchat = build('chat', 'v1', credentials=credentials)\n\n\n@app.route('/img/<path:filename>')\ndef image(filename):\n  global constants_service\n  try:\n    return send_from_directory(ConstantsService.get_value('img_store'),\n                               filename)\n  except IOError:\n    abort(404)\n\n\n@app.route('/html/<path:filename>')\ndef html(filename):\n  global constants_service\n  try:\n    return send_from_directory(ConstantsService.get_value('html_store'),\n                               filename)\n  except IOError:\n    abort(404)\n\n\n@app.route('/', methods=['POST'])\ndef home_post():\n  event_data = request.get_json()\n  logging.info(\"current event ['%s']\", json.dumps(event_data))\n\n  cur_spaces_ctx = chat.spaces().list().execute()['spaces']\n  event_data['spaces_ctx'] = cur_spaces_ctx\n  event_data['user_config'] = settings_repository.get_settings(\n      event_data['user']['name'])\n  logging.info(\"Current bot spaces ['%s']\", json.dumps(cur_spaces_ctx))\n  cur_task = TaskBuilder.build_task(event_data)\n  # logging.debug(\"current event ['%s']\", json.dumps(cur_task))\n  cur_task.run()\n  try:\n    message = cur_task.get_message()\n  except Exception as e:\n    message = {\"text\": \"```\\n\" + \"Command failed -> [{}]\".format(e) + \"\\n```\"}\n\n  result = chat.spaces().messages().create(\n      parent=cur_task.get_target_space_name(),\n      body=message).execute()\n\n  logging.info(\"message result ['%s']\", json.dumps(result))\n\n  return json.jsonify({})\n\n\nif __name__ == '__main__':\n  app.run(host='0.0.0.0', port=4343, debug=True)\n",
    "thread": {
      "name": "spaces/sVBZ8wAAAAE/threads/1RKCICeswk4",
      "retentionSettings": {
        "state": "PERMANENT"
      }
    }
  },
  "space": {
    "name": "spaces/sVBZ8wAAAAE",
    "singleUserBotDm": true,
    "type": "DM"
  },
  "type": "MESSAGE",
  "user": {
    "avatarUrl": "https://lh3.googleusercontent.com/a-/AOh14GjXYpL5CX8SHegBUm50c7V6LNEAli_JHcRUdA6wMw=k",
    "displayName": "Sascha Bast",
    "domainId": "3f8yvml",
    "email": "sascha.bast@dgm-kommunikation.de",
    "name": "users/115408569395812721682",
    "type": "HUMAN"
  }
}
